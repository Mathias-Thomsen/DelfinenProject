Index: src/main/java/Ui/UserInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Ui;\n\nimport ClubMember.ClubMember;\nimport Controller.Controller;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeUnit;\n\npublic class UserInterface {\n    Scanner scanner = new Scanner(System.in);\n    boolean userChoiceFalse = false;\n    private String nameInput;\n    Controller controller = new Controller();\n\n    public void mainMenu() {\n        controller.loadData();\n        int menuChoise = 0;\n        while (menuChoise != 9) {\n            System.out.println(\"\"\"\n                    -------------------------\n                    Sign in as:\n                    -------------------------\n                    1. Club manager\n                    2. Coach\n                    3. Cashier\n                    9. Exit program\n                    \"\"\");\n\n            do {\n                String valg = scanner.nextLine().trim();\n                try {\n                    menuChoise = Integer.parseInt(valg);\n                    userChoiceFalse = true;\n                } catch (NumberFormatException e) {\n                    System.out.print(\"There has been a error enter a valid number: \");\n                    scanner.nextLine();\n                }\n\n            } while (!userChoiceFalse);\n\n            switch (menuChoise) {\n                case 1 -> clubManagerMenu();\n                //case 2 -> coachMenu();\n                case 3 -> cashierMenu();\n                case 9 -> exitProgram();\n                default -> System.out.println(\"Invalid Input\\n\");\n            }\n        }\n\n    }\n\n    public void coachMenu(){\n        int menuChoise = 0;\n        System.out.println(\"\"\"\n                -------------------------\n                Club manager menu:\n                -------------------------\n                1. Show competitive swimmers\n                2. Search for members\n                3. Edit member results and swim categories\n                4. Show results\n                9. Go back to sign in\n                \"\"\");\n\n        do {\n            String valg = scanner.nextLine().trim();\n            try {\n                menuChoise = Integer.parseInt(valg);\n                userChoiceFalse = true;\n            } catch (NumberFormatException e) {\n                System.out.print(\"There has been a error enter a valid number: \");\n                scanner.nextLine();\n            }\n\n        } while (!userChoiceFalse);\n\n        switch (menuChoise) {\n            //case 1 -> createMember();\n            //case 2 -> showMenmbers();\n            //case 3 -> searchMember();\n            //case 4 -> editMember();\n            //case 5 -> deleteMember();\n            //case 9 -> mainMenu();\n            default -> System.out.println(\"Invalid Input\\n\");\n        }\n    }\n\n    public void clubManagerMenu() {\n        int menuChoise = 0;\n        System.out.println(\"\"\"\n                -------------------------\n                Club manager menu:\n                -------------------------\n                1. Create new member\n                2. Show list of members\n                3. Search for members\n                4. Edit member information\n                5. Delete current member\n                9. Go back to sign in\n                \"\"\");\n\n        do {\n            String valg = scanner.nextLine().trim();\n            try {\n                menuChoise = Integer.parseInt(valg);\n                userChoiceFalse = true;\n            } catch (NumberFormatException e) {\n                System.out.print(\"There has been a error enter a valid number: \");\n                scanner.nextLine();\n            }\n\n        } while (!userChoiceFalse);\n\n        switch (menuChoise) {\n            case 1 -> createMember();\n            case 2 -> showMenmbers();\n            case 3 -> searchMember();\n            case 4 -> editMember();\n            case 5 -> deleteMember();\n            case 9 -> mainMenu();\n            default -> System.out.println(\"Invalid Input\\n\");\n        }\n    }\n\n    public void cashierMenu(){\n        int menuChoise = 0;\n        System.out.println(\"\"\"\n                -------------------------\n                Cashier menu:\n                -------------------------\n                1. Show list of all members\n                2. Search for members\n                3. Edit member subscription\n                4. Show financials\n                5. Show list of unpaid members\n                9. Go back to sign in\n                \"\"\");\n\n        do {\n            String valg = scanner.nextLine().trim();\n            try {\n                menuChoise = Integer.parseInt(valg);\n                userChoiceFalse = true;\n            } catch (NumberFormatException e) {\n                System.out.print(\"There has been a error enter a valid number: \");\n                scanner.nextLine();\n            }\n\n        } while (!userChoiceFalse);\n\n        switch (menuChoise) {\n            case 1 -> showMenmbersWithCashier();\n            case 2 -> searchMemberCashier();\n            case 3 -> editMember();\n            case 4 -> showFinancialData();\n            case 5 -> showUnpaidMembers();\n            case 9 -> mainMenu();\n            default -> System.out.println(\"Invalid Input\\n\");\n        }\n\n    }\n\n\n    public void showUnpaidMembers(){\n        for(ClubMember controller : controller.getUndpaidMembers())\n        System.out.println(\"------------------\\n\"\n                + \"Membership Number:......... \" + controller.getMembershipNumber() + \"\\n\"\n                + \"Name:...................... \" + controller.getName() + \"\\n\"\n                + \"Age:....................... \" + controller.getAge() + \"\\n\"\n                + \"Active Status:............. \" + (controller.active() ? \"Active\" : \"Passive\" )+ \"\\n\"\n                + \"Junior or senior:.......... \" + (controller.getSenior() ? \"Senior\" : \"Junior\") + \"\\n\"\n                + \"Exerciser or competition:.. \" + controller.isSwimType() + \"\\n\"\n                + \"Subscription............... \" + controller.getPayment() + \"\\n\"\n                + \"Subscription is paid....... \" + (controller.isRandomPay() ? \"Paid\" : \"Not paid\"));\n    }\n    public void showFinancialData() {\n        controller.setTotaleIncome();\n        System.out.println(\"------------------\\n\"\n                + \"Total senior members (1600)...............: \" + controller.getTotalSeniorMembers() + \"\\n\"\n                + \"Total junior members (1000)...............: \" + controller.getTotalJuniorMembers() + \"\\n\"\n                + \"Total senior plus members (1200)..........: \" + controller.getTotalSeniorPlusMembers() + \"\\n\"\n                + \"Total passive members (500)...............: \" + controller.getTotalPassiveMembers() + \"\\n\"\n                + \"Total expected amount.....................: \" + controller.getTotalIncome() + \"\\n\"\n                + \"Total income..............................: \" + controller.getTotalAmount() + \"\\n\"\n                + \"Unpaid income from members................: \" + controller.getUnpaidAmount()\n\n        );\n\n    }\n    public void createMember() {\n\n        //Name\n        System.out.println(\"--------------------------------------------------------\");\n        System.out.println(\"Input new member name: \");\n        String nameInput = scanner.nextLine();\n        while (nameInput.isEmpty() || nameInput.equals(\" \")) {\n            System.out.print(\"Invalid input try again:\");\n            nameInput = scanner.nextLine();\n        }\n\n        //Age\n        System.out.println(\"--------------------------------------------------------\");\n        System.out.println(\"Input new member birthday: \");\n        System.out.print(\"Year (fx 2000): \");\n        while (!scanner.hasNextInt()) {\n            System.out.println(\"Member age can only be numbers, try again\");\n            scanner.nextLine();\n        }\n        int getBirthYear = scanner.nextInt();\n        scanner.nextLine();\n        System.out.print(\"Month (fx 9): \");\n        while (!scanner.hasNextInt()) {\n            System.out.println(\"Member age can only be numbers, try again\");\n            scanner.nextLine();\n        }\n        int getBirthMonth = scanner.nextInt();\n        scanner.nextLine();\n        System.out.print(\"Day (fx 18):\");\n        while (!scanner.hasNextInt()) {\n            System.out.println(\"Member age can only be numbers, try again\");\n            scanner.nextLine();\n        }\n        int getBirthDay = scanner.nextInt();\n        scanner.nextLine();\n\n        LocalDate currentDate = LocalDate.now();\n        LocalDate birthDate = LocalDate.of(getBirthYear, getBirthMonth, getBirthDay);\n\n        int ageInput = controller.calculateAge(birthDate, currentDate);\n\n\n        //Activity status\n        System.out.println(\"--------------------------------------------------------\");\n        System.out.println(\"Input new member activity status (active/passive): \");\n        String activityInput;\n        boolean setActive;\n        boolean activeOrPassive;\n        while (true) {\n            activityInput = scanner.nextLine().trim().toLowerCase();\n            if (activityInput.equals(\"active\") || activityInput.equals(\"a\")) {\n                activeOrPassive = true;\n                setActive = true;\n                break;\n            } else if (activityInput.equals(\"passive\") || activityInput.equals(\"p\")) {\n                activeOrPassive = true;\n                setActive = false;\n                break;\n            } else {\n                System.out.println(\"You have to type active/passive or (a/p)\");\n            }\n        }\n\n        //Exerciser/competition\n        System.out.println(\"--------------------------------------------------------\");\n        System.out.println(\"Input new member activity status (Exerciser/competition): \");\n        String swim;\n        boolean exerciserOrCompetition;\n\n        while (true) {\n            swim = scanner.nextLine().trim().toLowerCase();\n            if (swim.equals(\"exerciser\") || swim.equals(\"e\")) {\n                exerciserOrCompetition = true;\n                swim = \"Exerciser\";\n                break;\n            } else if (swim.equals(\"competition\") || swim.equals(\"c\")) {\n                exerciserOrCompetition = true;\n                swim = \"Competition\";\n                break;\n            } else {\n                System.out.println(\"You have to type exerciser/competition or (e/c)\");\n            }\n        }\n\n        Random random = new Random();\n        boolean randomPay = random.nextBoolean();\n\n        //Create member\n        controller.createClubMember(nameInput, ageInput, setActive, swim);\n        controller.getRandomPay();\n        controller.junoirOrsenoir();\n        controller.setClubMemberNumber();\n        controller.getCreatePayment();\n\n        controller.saveData(); //save to the file every time we make a new member.\n    }\n    public void showMenmbers() {\n        for (ClubMember controller : controller.getMembers()) {\n            System.out.println(\"------------------\\n\"\n                    + \"Membership Number:......... \" + controller.getMembershipNumber() + \"\\n\"\n                    + \"Name:...................... \" + controller.getName() + \"\\n\"\n                    + \"Age:....................... \" + controller.getAge() + \"\\n\"\n                    + \"Active Status:............. \" + (controller.active() ? \"Active\" : \"Passive\" ) + \"\\n\"\n                    + \"Junior or senior:.......... \" + (controller.getSenior() ? \"Senior\" : \"Junior\") + \"\\n\"\n                    + \"Exerciser or competition:.. \" + controller.isSwimType());\n        }\n    }\n    public void showMenmbersWithCashier() {\n        for (ClubMember controller : controller.getMembers()) {\n            System.out.println(\"------------------\\n\"\n                    + \"Membership Number:......... \" + controller.getMembershipNumber() + \"\\n\"\n                    + \"Name:...................... \" + controller.getName() + \"\\n\"\n                    + \"Age:....................... \" + controller.getAge() + \"\\n\"\n                    + \"Active Status:............. \" + (controller.active() ? \"Active\" : \"Passive\" )+ \"\\n\"\n                    + \"Junior or senior:.......... \" + (controller.getSenior() ? \"Senior\" : \"Junior\") + \"\\n\"\n                    + \"Exerciser or competition:.. \" + controller.isSwimType() + \"\\n\"\n                    + \"Subscription............... \" + controller.getPayment() + \"\\n\"\n                    + \"Subscription is paid....... \" + (controller.isRandomPay() ? \"Paid\" : \"Not paid\"));\n        }\n    }\n    public void searchMemberCashier() {\n        System.out.println(\"-----------------------------------------------------\");\n        System.out.println(\"Type in the member you want to search for: \");\n\n        String searchTerm = scanner.nextLine().toLowerCase();\n        for (ClubMember controller : controller.findMember(searchTerm)) {\n            System.out.println(\"------------------\\n\"\n                    + \"Membership Number:......... \" + controller.getMembershipNumber() + \"\\n\"\n                    + \"Name:...................... \" + controller.getName() + \"\\n\"\n                    + \"Age:....................... \" + controller.getAge() + \"\\n\"\n                    + \"Active Status:............. \" + (controller.active() ? \"Active\" : \"Passive\") + \"\\n\"\n                    + \"Junior or senior:.......... \" + (controller.getSenior() ? \"Senior\" : \"Junior\")+ \"\\n\"\n                    + \"Exerciser or competition:.. \" + controller.isSwimType() + \"\\n\"\n                    + \"Subscription............... \" + controller.getPayment());\n        }\n        if (controller.findMember(searchTerm).isEmpty()) {\n            System.out.println(\"No result\");\n        }\n\n    }\n    public void searchMember() {\n        System.out.println(\"-----------------------------------------------------\");\n        System.out.println(\"Type in the member you want to search for: \");\n\n        String searchTerm = scanner.nextLine().toLowerCase();\n        for (ClubMember controller : controller.findMember(searchTerm)) {\n            System.out.println(\"------------------\\n\"\n                    + \"Membership Number:......... \" + controller.getMembershipNumber() + \"\\n\"\n                    + \"Name:...................... \" + controller.getName() + \"\\n\"\n                    + \"Age:....................... \" + controller.getAge() + \"\\n\"\n                    + \"Active Status:............. \" + (controller.active() ? \"Active\" : \"Passive\") + \"\\n\"\n                    + \"Junior or senior:.......... \" + controller.getSenior() + \"\\n\"\n                    + \"Exerciser or competition:.. \" + controller.isSwimType());\n        }\n        if (controller.findMember(searchTerm).isEmpty()) {\n            System.out.println(\"No result\");\n        }\n\n    }\n    public void editMember() {\n        System.out.println(\"-----------------------------------------------------\");\n        System.out.println(\"Search for the member you want to edit: \");\n        String userEditMember = scanner.nextLine();\n        ArrayList<ClubMember> searchEditResult = new ArrayList<>();\n\n        int index = 1;\n\n        for (ClubMember editMember : controller.getMembers()) {\n            String member = editMember.getName().toLowerCase();\n            if (member.contains(userEditMember.toLowerCase())) {\n                searchEditResult.add(editMember);\n                System.out.println(index++ + \":\" + editMember.getName());\n\n            }\n        }\n\n        System.out.print(\"Type in that member you want to edit: \");\n        String userEditNumberString = scanner.nextLine();\n        int userEditNumberInteger = Integer.parseInt(userEditNumberString);\n\n\n        ClubMember editMember = searchEditResult.get(userEditNumberInteger - 1);\n        System.out.println(\"You have selected: \" + editMember.getName());\n\n        System.out.println(\"If you don't want to edit press ENTER!\");\n\n\n        do {\n            System.out.println(\"Member name: \" + editMember.getName());\n\n            try {\n                System.out.print(\"Type your update here: \");\n                String newMemberName = scanner.nextLine().trim();\n                if (!newMemberName.isEmpty()) {\n                    editMember.setName(newMemberName);\n                }\n                userChoiceFalse = true;\n            } catch (NumberFormatException var11) {\n                System.out.println(\"Type a name with letters. If you don't want to edit press ENTER!\");\n            }\n        } while (!userChoiceFalse);\n\n\n        do {\n            System.out.println(\"Activity status: \" + (editMember.active() ? \"active\" : \"passive\"));\n\n            try {\n                System.out.print(\"Type your update here (active/passive):  \");\n                boolean activeOrPassive;\n                while (true) {\n                    String activityEditInput = scanner.nextLine().trim().toLowerCase();\n                    if (!activityEditInput.isEmpty()) {\n\n                        if (activityEditInput.equals(\"active\") || activityEditInput.equals(\"a\")) {\n                            activeOrPassive = true;\n                            editMember.setActive(true);\n                            break;\n                        } else if (activityEditInput.equals(\"passive\") || activityEditInput.equals(\"p\")) {\n                            activeOrPassive = true;\n                            editMember.setActive(false);\n                            break;\n                        } else {\n                            System.out.println(\"You have to type active/passive or (a/p)\");\n                        }\n                    } else {\n                        break;\n                    }\n                }\n                userChoiceFalse = true;\n            } catch (NumberFormatException var9) {\n                System.out.println(\"Type with letters. If you don't want to edit press ENTER!\");\n            }\n        } while (!userChoiceFalse);\n\n        do {\n            System.out.println(\"Member paid: \" + (editMember.isRandomPay() ? \"Has paid\" : \"Haven't paid\"));\n\n            try {\n                System.out.print(\"Type your update here (Has paid/Has not paid):  \");\n                boolean activeOrPassive;\n                while (true) {\n                    String isRandomInput = scanner.nextLine().trim().toLowerCase();\n                    if (!isRandomInput.isEmpty()) {\n\n                        if (isRandomInput.trim().toLowerCase().equals(\"has paid\") || isRandomInput.trim().toLowerCase().equals(\"p\")) {\n                            activeOrPassive = true;\n                            editMember.setRandomPay(true);\n                            break;\n                        } else if (isRandomInput.trim().toLowerCase().equals(\"has not paid\") || isRandomInput.equals(\"n\")) {\n                            activeOrPassive = true;\n                            editMember.setRandomPay(false);\n                            break;\n                        } else {\n                            System.out.println(\"You have to type (has paid/has not paid) or (p/n)\");\n                        }\n                    } else {\n                        break;\n                    }\n                }\n                userChoiceFalse = true;\n            } catch (NumberFormatException var9) {\n                System.out.println(\"Type with letters. If you don't want to edit press ENTER!\");\n            }\n        } while (!userChoiceFalse);\n\n\n\n        controller.junoirOrsenoir();\n        controller.setClubMemberNumber();\n        controller.saveData();\n\n\n    }\n    public void deleteMember() {\n        System.out.println(\"--------------------------------------------------------\");\n        System.out.println(\"Input the name of a member you want to delete: \");\n        String userDeleteMember = scanner.nextLine().trim().toLowerCase();\n        ArrayList<ClubMember> searchDeleteMember = new ArrayList<>();\n\n        int index = 1;\n\n        for (ClubMember deleteMember : controller.getClubMembers()) {\n            nameInput = deleteMember.getName().toLowerCase();\n            if (nameInput.contains(userDeleteMember.toLowerCase())) {\n                searchDeleteMember.add(deleteMember);\n                System.out.println(index++ + \": \" + deleteMember.getName());\n            }\n        }\n        System.out.println(\"Select the number of the member you want to delete: \");\n        String userDeleteNumberString = scanner.nextLine();\n        int userDeleteNumberInt = Integer.parseInt(userDeleteNumberString);\n\n        ClubMember deleteMember = searchDeleteMember.get(userDeleteNumberInt - 1);\n        controller.deleteMember(deleteMember);\n        System.out.println(\"You have now deleted: \" + deleteMember.getName() + \" from you membership\");\n\n        controller.saveData();\n    }\n    public void exitProgram() {\n        try {\n            System.out.print(\"Exiting Program\");\n            TimeUnit.SECONDS.sleep(1);\n            System.out.print(\".\");\n            TimeUnit.SECONDS.sleep(1);\n            System.out.print(\".\");\n            TimeUnit.SECONDS.sleep(1);\n            System.out.print(\".\");\n            System.exit(1);\n\n        } catch (InterruptedException e) {\n            System.out.println(\"System can not exit\");\n        }\n\n\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Ui/UserInterface.java b/src/main/java/Ui/UserInterface.java
--- a/src/main/java/Ui/UserInterface.java	(revision 129936780d321d1bb2616e7591418babe258e0bb)
+++ b/src/main/java/Ui/UserInterface.java	(date 1670282862347)
@@ -274,6 +274,11 @@
             }
         }
 
+        if (swim.equals("Competition")){
+            System.out.println("Please, select which category you swim");
+            String swimType = scanner.nextLine();
+        }
+
         Random random = new Random();
         boolean randomPay = random.nextBoolean();
 
Index: src/main/java/Controller/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\n\nimport ClubMember.ClubMember;\nimport DataSource.Database;\nimport DataSource.Filehandler;\nimport Financials.Financials;\nimport Subscription.Subscription;\n\nimport java.io.FileNotFoundException;\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.util.ArrayList;\n\npublic class Controller {\n    Database database = new Database();\n    Filehandler filehandler = new Filehandler();\n    ClubMember clubMember = new ClubMember();\n    Subscription subscription = new Subscription();\n    Financials financials = new Financials();\n    public void createClubMember(String name, int age, boolean activityStatus, String swimType){\n        database.createClubMember( name, age, activityStatus, swimType);\n    }\n\n    public ArrayList<ClubMember> getClubMembers(){\n        return database.getClubMembers();\n    }\n\n    public void deleteMember(ClubMember deleteMember){\n        database.deleteMember(deleteMember);\n    }\n\n    public void saveData(){\n        try {\n            filehandler.saveData(database.getClubMembers());\n        } catch (FileNotFoundException e) {\n            System.out.println(\"fail\");\n        }\n    }\n    public void loadData(){\n        try {\n            database.clearData();\n            filehandler.loadData(database.getClubMembers());\n        } catch (FileNotFoundException e) {\n            System.out.println(\"fail\");\n        }\n    }\n\n    public ArrayList<ClubMember> getMembers() {\n        return database.getClubMembers();\n    }\n\n\n\n    public ArrayList<ClubMember> findMember(String searchTerm) {\n        return database.findMember(searchTerm);\n    }\n\n\n    public void junoirOrsenoir() {\n        database.juniorOrSenior();\n    }\n\n    public void setClubMemberNumber(){\n        database.setClubMemberNumber();\n    }\n\n\n    public int calculateAge(LocalDate birthDate, LocalDate currentDate) {\n        if ((birthDate != null) && (currentDate != null)) {\n            return Period.between(birthDate, currentDate).getYears();\n        } else {\n            return 0;\n        }\n    }\n\n    public void getCreatePayment() {\n        database.createSubscriptionInDatabase();\n    }\n\n\n    public void setTotaleIncome() {\n        financials.setTotalIncome(database.getTotalIncome());\n\n    }\n\n    public int getTotalIncome() {\n        return financials.getTotalIncome();\n    }\n\n    public int getTotalSeniorMembers() {\n        return database.getTotalSeniorMembers();\n    }\n\n    public int getTotalJuniorMembers() {\n        return database.getTotalJuniorMembers();\n    }\n\n    public int getTotalSeniorPlusMembers() {\n        return database.getTotalSeniorPlusMembers();\n    }\n\n    public int getTotalPassiveMembers() {\n        return database.getTotalPassiveMembers();\n    }\n\n    public void getRandomPay(){\n        database.getRandomPay();\n    }\n\n    public void setRandomPay(boolean randomPay){\n        clubMember.setRandomPay(randomPay);\n    }\n\n    public int getTotalRandomPay(){\n        return database.getTotalRandomPay();\n    }\n\n    public int getUnpaidAmount(){\n        return database.getUnpaidAmont();\n    }\n\n    public int getTotalAmount(){\n        return database.getTotalAmount();\n    }\n\n    public ArrayList<ClubMember> getUndpaidMembers() {\n        return database.getUnpaidMember();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Controller/Controller.java b/src/main/java/Controller/Controller.java
--- a/src/main/java/Controller/Controller.java	(revision 129936780d321d1bb2616e7591418babe258e0bb)
+++ b/src/main/java/Controller/Controller.java	(date 1670275718665)
@@ -1,6 +1,7 @@
 package Controller;
 
 import ClubMember.ClubMember;
+import Competitive.Competitive;
 import DataSource.Database;
 import DataSource.Filehandler;
 import Financials.Financials;
@@ -12,6 +13,7 @@
 import java.util.ArrayList;
 
 public class Controller {
+    Competitive competitive = new Competitive();
     Database database = new Database();
     Filehandler filehandler = new Filehandler();
     ClubMember clubMember = new ClubMember();
@@ -127,6 +129,9 @@
         return database.getUnpaidMember();
     }
 
+    public void setBackCrawl(){
+       competitive.setBackCrawl(true);
+    }
 
 
 
Index: src/main/java/Competitive/Competitive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Competitive;\n\npublic class Competitive {\n    // isBackcrawl?\n    //isButterfly\n    //getTime\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Competitive/Competitive.java b/src/main/java/Competitive/Competitive.java
--- a/src/main/java/Competitive/Competitive.java	(revision 129936780d321d1bb2616e7591418babe258e0bb)
+++ b/src/main/java/Competitive/Competitive.java	(date 1670275718657)
@@ -1,7 +1,35 @@
 package Competitive;
 
 public class Competitive {
-    // isBackcrawl?
-    //isButterfly
-    //getTime
+    private boolean isBackCrawl;
+    private boolean isButterfly;
+     private String getTime;
+
+    public Competitive(){
+    }
+
+    public boolean isButterfly() {
+        return isButterfly;
+    }
+
+    public void setButterfly(boolean butterfly) {
+        isButterfly = butterfly;
+    }
+
+    public String getGetTime() {
+        return getTime;
+    }
+
+    public void setGetTime(String getTime) {
+        this.getTime = getTime;
+    }
+
+
+    public boolean isBackCrawl() {
+        return isBackCrawl;
+    }
+
+    public void setBackCrawl(boolean backCrawl) {
+        isBackCrawl = backCrawl;
+    }
 }
